{"ast":null,"code":"// Copyright The Linux Foundation and each contributor to CommunityBridge.\n// SPDX-License-Identifier: MIT\nimport { isDevMode } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { AppSettings } from 'src/app/config/app-settings';\nimport { EnvConfig } from 'src/app/config/cla-env-utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/alert.service\";\nimport * as i3 from \"src/app/shared/services/storage.service\";\nconst FileSaver = require('file-saver');\nexport let ClaContributorService = /*#__PURE__*/(() => {\n  class ClaContributorService {\n    constructor(httpClient, alertService, storageService) {\n      this.httpClient = httpClient;\n      this.alertService = alertService;\n      this.storageService = storageService;\n      this.openDialogModalEvent = new Subject();\n      this.localTesting = false;\n      this.baseURL = EnvConfig.default['api-base'];\n      this.v4BaseUrl = EnvConfig.default['api-v4-base'];\n      this.corporateV2Base = EnvConfig.default['corporate-v2-base'] + '/';\n      this.v1ClaAPIURLLocal = 'http://localhost:5000';\n      this.v2ClaAPIURLLocal = 'http://localhost:5000';\n      this.v3ClaAPIURLLocal = 'http://localhost:8080';\n      this.v4ClaAPIURLLocal = 'http://localhost:8080';\n      // Determine if we're running in a local services (developer) mode - the USE_LOCAL_SERVICES environment variable\n      // will be set to 'true', otherwise we're using normal services deployed in each environment\n      // const localServicesMode = (process.env.USE_LOCAL_SERVICES || 'false').toLowerCase() === 'true';\n      if (isDevMode()) {\n        console.log('Running in local services mode');\n      } else {\n        console.log('Running in deployed services mode');\n      }\n      // this.localTesting = isDevMode();\n    }\n\n    getUser(userId) {\n      const url = this.getV2Endpoint('/v2/user/' + userId);\n      return this.httpClient.get(url);\n    }\n    updateUser(data) {\n      const url = this.getV3Endpoint('/v3/users');\n      return this.httpClient.put(url, data);\n    }\n    getProject(projectId) {\n      const url = this.getV2Endpoint('/v2/project/' + projectId);\n      return this.httpClient.get(url);\n    }\n    getUserActiveSignature(userId) {\n      const url = this.getV2Endpoint('/v2/user/' + userId + '/active-signature');\n      return this.httpClient.get(url);\n    }\n    searchOrganization(organizationName, organizationWebsite) {\n      let url = this.getV3Endpoint('/v3/organization/search?');\n      if (organizationName) {\n        url += 'companyName=' + organizationName;\n      }\n      if (organizationWebsite) {\n        url += 'websiteName=' + organizationWebsite;\n      }\n      url += '&include-signing-entity-name=false';\n      return this.httpClient.get(url);\n    }\n    getClearBitData(organizationWebsite) {\n      const url = this.getV4Endpoint('/v4/company/lookup?websiteName=' + organizationWebsite);\n      return this.httpClient.get(url);\n    }\n    hasOrganizationExist(organizationName, organizationWebsite) {\n      let url = this.getV3Endpoint('/v3/organization/search?');\n      if (organizationName) {\n        url += '$filter=name eq ' + organizationName;\n      }\n      if (organizationWebsite) {\n        url += '$filter=website eq ' + organizationWebsite;\n      }\n      return this.httpClient.get(url);\n    }\n    getOrganizationDetails(companySFID) {\n      const url = this.getV3Endpoint('/v3/company/external/' + companySFID);\n      return this.httpClient.get(url);\n    }\n    getSigningEntityNameDetails(signingEntityName, companySFID) {\n      const url = this.getV3Endpoint('/v3/company/signing-entity-name?name=' + signingEntityName + '&companySFID=' + companySFID);\n      return this.httpClient.get(url);\n    }\n    postIndividualSignatureRequest(data) {\n      const url = this.getV2Endpoint('/v2/request-individual-signature');\n      return this.httpClient.post(url, data);\n    }\n    CheckPreparedEmployeeSignature(data) {\n      const url = this.getV2Endpoint('/v2/check-prepare-employee-signature');\n      return this.httpClient.post(url, data);\n    }\n    postEmployeeSignatureRequest(signatureRequest) {\n      const url = this.getV2Endpoint('/v2/request-employee-signature');\n      return this.httpClient.post(url, signatureRequest);\n    }\n    getLastIndividualSignature(userId, projectId) {\n      const url = this.getV2Endpoint('/v2/user/' + userId + '/project/' + projectId + '/last-signature');\n      return this.httpClient.get(url);\n    }\n    getGerritUserInfo() {\n      const url = this.getV1Endpoint('/v1/user/gerrit');\n      return this.httpClient.post(url, '');\n    }\n    getGerritProjectInfo(projectId) {\n      const url = this.getV2Endpoint('/v2/project/' + projectId);\n      return this.httpClient.get(url);\n    }\n    inviteManager(userLFID, data) {\n      const url = this.getV4Endpoint('/v4/user/' + userLFID + '/invite-company-admin');\n      return this.httpClient.post(url, data);\n    }\n    getProjectCLAManagers(projectId, companyId) {\n      const url = this.getV4Endpoint('/v4/company/' + companyId + '/cla-group/' + projectId + '/cla-managers');\n      return this.httpClient.get(url);\n    }\n    addCompany(userId, data) {\n      const url = this.getV4Endpoint('/v4/user/' + userId + '/company');\n      return this.httpClient.post(url, data);\n    }\n    getCompanyAdminList(companySFID) {\n      const url = this.getV4Endpoint('/v4/company/' + companySFID + '/admin');\n      return this.httpClient.get(url);\n    }\n    addAsCLAManagerDesignee(companyId, projectId, data) {\n      const url = this.getV4Endpoint('/v4/company/' + companyId + '/claGroup/' + projectId + '/cla-manager-designee');\n      return this.httpClient.post(url, data);\n    }\n    hasRoleAssigned(companyId, projectId, userLFID) {\n      const url = this.getV4Endpoint('/v4/company/' + companyId + '/user/' + userLFID + '/claGroupID/' + projectId + '/is-cla-manager-designee');\n      return this.httpClient.get(url);\n    }\n    notifyCLAMangers(data) {\n      const url = this.getV4Endpoint('/v4/notify-cla-managers');\n      return this.httpClient.post(url, data);\n    }\n    handleError(errorObj) {\n      const errors = errorObj.error.errors;\n      if (errors) {\n        for (const property in errors) {\n          if (property) {\n            const errorMsg = property + ': ' + errors[property];\n            this.alertService.error(errorMsg);\n          }\n        }\n      }\n    }\n    getUserLFID() {\n      const hasGerrit = JSON.parse(this.storageService.getItem(AppSettings.HAS_GERRIT));\n      const userModel = JSON.parse(this.storageService.getItem(AppSettings.USER));\n      const gerritUserModel = JSON.parse(this.storageService.getItem(AppSettings.AUTH_DATA));\n      if (hasGerrit) {\n        return gerritUserModel.lf_username;\n      } else {\n        return userModel.lf_username;\n      }\n    }\n    getLFXCorporateURL() {\n      let url = '';\n      // Load the CLA Group models from local storage - should only be 1 CLA Group\n      const claGroupModel = JSON.parse(this.storageService.getItem(AppSettings.PROJECT));\n      // We may have zero or more SF Projects attached to this CLA Group\n      const projectDetails = claGroupModel.projects;\n      // TODO: figure out the github repository that was used to come here...\n      // pick the matching SF Project based on the repository name, instead of just using the first project in the list\n      const project = this.getProjectFromRepo(projectDetails);\n      console.log('project: ', project);\n      // No SF Projects for this CLA Group\n      if (projectDetails.length === 0) {\n        // No SFID associated with project so redirect at corporate console dashboard.\n        url = this.corporateV2Base + 'company/dashboard';\n      } else if (claGroupModel.signed_at_foundation_level && claGroupModel.foundation_sfid === project.project_sfid) {\n        // Signed at foundation level.\n        url = this.corporateV2Base + 'foundation/' + projectDetails[0].foundation_sfid + '/cla';\n      } else {\n        if (project !== null) {\n          // For standalone project we must redirect to the SFID of The Linux Foundation\n          url = this.corporateV2Base + 'foundation/' + project.foundation_sfid + '/project/' + project.project_sfid + '/cla';\n        } else {\n          this.alertService.error('Unable to find project by repository, please contact to your administrator.');\n        }\n      }\n      return url;\n    }\n    getProjectFromRepo(projects) {\n      const repoURL = JSON.parse(this.storageService.getItem(AppSettings.REDIRECT));\n      if (repoURL) {\n        for (const project of projects) {\n          // Checked in Github Repo\n          if (project.github_repos.length > 0) {\n            const repos = project.github_repos;\n            for (const repo of repos) {\n              if (repoURL.indexOf(repo.repository_name) >= 0) {\n                return project;\n              }\n            }\n          }\n          // Checked in Gitlab Repo\n          if (project.gitlab_repos.length > 0) {\n            const repos = project.gitlab_repos;\n            for (const repo of repos) {\n              if (repoURL.indexOf(repo.repository_name) >= 0) {\n                return project;\n              }\n            }\n          }\n          // Checked in Gerrit Repo\n          if (project.gerrit_repos.length > 0) {\n            const repos = project.gerrit_repos;\n            for (const repo of repos) {\n              if (repoURL.indexOf(repo.gerrit_url) >= 0) {\n                return project;\n              }\n            }\n          }\n        }\n      }\n      return null;\n    }\n    getUserPublicEmail() {\n      const hasGerrit = JSON.parse(this.storageService.getItem(AppSettings.HAS_GERRIT));\n      const userModel = JSON.parse(this.storageService.getItem(AppSettings.USER));\n      const gerritUserModel = JSON.parse(this.storageService.getItem(AppSettings.USER));\n      let emails;\n      if (hasGerrit) {\n        return gerritUserModel.lf_email;\n      } else {\n        if (userModel.lf_email) {\n          return userModel.lf_email;\n        }\n        emails = userModel.user_emails;\n      }\n      return this.findPublicEmail(emails);\n    }\n    findPublicEmail(emailArray) {\n      for (const email of emailArray) {\n        if (email.indexOf(AppSettings.GITHUB_EMAIL_CONTENT) < 0) {\n          return email;\n        }\n      }\n      return null;\n    }\n    downloadFile(projectId, claType) {\n      const url = this.getV4Endpoint('/v4/template/' + projectId + '/preview?watermark=true&claType=' + claType);\n      let fileName = claType === 'icla' ? 'Individual_Contributor' : 'Corporate_Contributor';\n      fileName += '_License_Agreement.pdf';\n      this.saveAs(url, fileName);\n    }\n    saveAs(URLToPDF, fileName) {\n      const oReq = new XMLHttpRequest();\n      oReq.open('GET', URLToPDF, true);\n      oReq.responseType = 'blob';\n      oReq.onload = () => {\n        const file = new Blob([oReq.response], {\n          type: 'application/pdf'\n        });\n        FileSaver.saveAs(file, fileName);\n      };\n      oReq.send();\n    }\n    getTypeByUrl() {\n      const redirectUrl = JSON.parse(this.storageService.getItem(AppSettings.REDIRECT));\n      if (redirectUrl) {\n        if (redirectUrl.indexOf(AppSettings.GITHUB_DOMAIN) >= 0) {\n          return AppSettings.GITHUB;\n        }\n        if (redirectUrl.indexOf(AppSettings.GITLAB_DOMAIN) >= 0) {\n          return AppSettings.GITLAB;\n        }\n      }\n      return AppSettings.GITHUB;\n    }\n    /**\n     * Constructs a URL based on the path and endpoint host:port.\n     * @param path the URL path\n     * @returns a URL to the V1 endpoint with the specified path. If running in local mode, the endpoint will point to a\n     * local host:port - otherwise the endpoint will point the appropriate environment endpoint running in the cloud.\n     */\n    getV1Endpoint(path) {\n      let url;\n      if (this.localTesting) {\n        url = new URL(this.v1ClaAPIURLLocal + path);\n      } else {\n        url = new URL(this.baseURL + path);\n      }\n      return url.toString();\n    }\n    /**\n     * Constructs a URL based on the path and endpoint host:port.\n     * @param path the URL path\n     * @returns a URL to the V2 endpoint with the specified path. If running in local mode, the endpoint will point to a\n     * local host:port - otherwise the endpoint will point the appropriate environment endpoint running in the cloud.\n     */\n    getV2Endpoint(path) {\n      let url;\n      if (this.localTesting) {\n        url = new URL(this.v2ClaAPIURLLocal + path);\n      } else {\n        url = new URL(this.baseURL + path);\n      }\n      return url.toString();\n    }\n    /**\n     * Constructs a URL based on the path and endpoint host:port.\n     * @param path the URL path\n     * @returns a URL to the V3 endpoint with the specified path. If running in local mode, the endpoint will point to a\n     * local host:port - otherwise the endpoint will point the appropriate environment endpoint running in the cloud.\n     */\n    getV3Endpoint(path) {\n      let url;\n      if (this.localTesting) {\n        url = new URL(this.v3ClaAPIURLLocal + path);\n      } else {\n        url = new URL(this.baseURL + path);\n      }\n      return url.toString();\n    }\n    /**\n     * Constructs a URL based on the path and endpoint host:port.\n     * @param path the URL path\n     * @returns a URL to the V4 endpoint with the specified path. If running in local mode, the endpoint will point to a\n     * local host:port - otherwise the endpoint will point the appropriate environment endpoint running in the cloud.\n     */\n    getV4Endpoint(path) {\n      let url;\n      if (this.localTesting) {\n        url = new URL(this.v4ClaAPIURLLocal + path);\n      } else {\n        url = new URL(this.v4BaseUrl + path);\n      }\n      return url.toString();\n    }\n  }\n  ClaContributorService.ɵfac = function ClaContributorService_Factory(t) {\n    return new (t || ClaContributorService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AlertService), i0.ɵɵinject(i3.StorageService));\n  };\n  ClaContributorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClaContributorService,\n    factory: ClaContributorService.ɵfac,\n    providedIn: 'root'\n  });\n  return ClaContributorService;\n})();","map":null,"metadata":{},"sourceType":"module"}