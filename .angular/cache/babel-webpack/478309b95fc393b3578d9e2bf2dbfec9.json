{"ast":null,"code":"// Copyright The Linux Foundation and each contributor to CommunityBridge.\n// SPDX-License-Identifier: MIT\nimport { EventEmitter } from '@angular/core';\nimport { AppSettings } from 'src/app/config/app-settings';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/cla-contributor.service\";\nimport * as i2 from \"src/app/shared/services/auth.service\";\nimport * as i3 from \"src/app/shared/services/storage.service\";\nimport * as i4 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i5 from \"src/app/shared/services/alert.service\";\nimport * as i6 from \"src/app/shared/services/loader.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"../modal-header/modal-header.component\";\nconst _c0 = [\"errorModal\"];\nconst _c1 = [\"warningModal\"];\nfunction ConfigureClaManagerModalComponent_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 11);\n  }\n}\nfunction ConfigureClaManagerModalComponent_i_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 12);\n  }\n}\nfunction ConfigureClaManagerModalComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.spinnerMessage, \" \");\n  }\n}\nfunction ConfigureClaManagerModalComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" When this CLA is signed, you will be the initial CLA Manager. Please click below to proceed. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ConfigureClaManagerModalComponent_ng_template_11_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵelementStart(1, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function ConfigureClaManagerModalComponent_ng_template_11_div_11_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.onClickRetry();\n    });\n    i0.ɵɵtext(2, \" Retry \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ConfigureClaManagerModalComponent_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵelementStart(1, \"div\", 15);\n    i0.ɵɵelementStart(2, \"div\", 16);\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵelement(4, \"i\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 19);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"p\", 20);\n    i0.ɵɵelementStart(8, \"div\", 21);\n    i0.ɵɵelementStart(9, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function ConfigureClaManagerModalComponent_ng_template_11_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onClickBackBtn();\n    });\n    i0.ɵɵtext(10, \" Go Back \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, ConfigureClaManagerModalComponent_ng_template_11_div_11_Template, 3, 0, \"div\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r5.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r5.message, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.showRetryBtn);\n  }\n}\nfunction ConfigureClaManagerModalComponent_ng_template_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵelementStart(1, \"div\", 15);\n    i0.ɵɵelementStart(2, \"app-modal-header\", 24);\n    i0.ɵɵlistener(\"closeDialogEmitter\", function ConfigureClaManagerModalComponent_ng_template_13_Template_app_modal_header_closeDialogEmitter_2_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.onClickClose();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 16);\n    i0.ɵɵelement(4, \"div\", 25);\n    i0.ɵɵelementStart(5, \"div\", 21);\n    i0.ɵɵelementStart(6, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function ConfigureClaManagerModalComponent_ng_template_13_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.onClickBackBtn();\n    });\n    i0.ɵɵtext(7, \" Go Back \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 21);\n    i0.ɵɵelementStart(9, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function ConfigureClaManagerModalComponent_ng_template_13_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.onClickProceedModalBtn();\n    });\n    i0.ɵɵtext(10, \" Proceed \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r7.message, i0.ɵɵsanitizeHtml);\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"active\": a0\n  };\n};\nexport let ConfigureClaManagerModalComponent = /*#__PURE__*/(() => {\n  class ConfigureClaManagerModalComponent {\n    constructor(claContributorService, authService, storageService, modalService, alertService, loaderService) {\n      this.claContributorService = claContributorService;\n      this.authService = authService;\n      this.storageService = storageService;\n      this.modalService = modalService;\n      this.alertService = alertService;\n      this.loaderService = loaderService;\n      this.showCloseBtnEmitter = new EventEmitter();\n      this.hasCLAManagerDesignee = false;\n      this.showCloseBtnEmitter.emit(false);\n      setTimeout(() => {\n        this.addOrganizationIfNotAdded();\n      }, 100);\n    }\n    ngOnInit() {\n      this.showRetryBtn = false;\n      this.failedCount = 0;\n      this.company = JSON.parse(this.storageService.getItem(AppSettings.SELECTED_COMPANY));\n    }\n    manageAuthRedirection() {\n      this.spinnerMessage = 'Please wait while we configure the initial CLA Manager settings for this CLA.';\n      const actionType = JSON.parse(this.storageService.getItem(AppSettings.ACTION_TYPE));\n      if (actionType === AppSettings.SIGN_CLA) {\n        this.addContributorAsDesignee();\n      } else {\n        this.validateUserLFID();\n      }\n    }\n    addOrganizationIfNotAdded() {\n      const data = JSON.parse(this.storageService.getItem(AppSettings.NEW_ORGANIZATIONS));\n      if (data !== undefined && data !== null) {\n        // Add organization if it is not created.\n        this.spinnerMessage = 'Please wait for a moment, we are adding the organization.';\n        this.addNewOrganization(data);\n      } else {\n        this.manageAuthRedirection();\n      }\n    }\n    addNewOrganization(data) {\n      const userModel = JSON.parse(this.storageService.getItem(AppSettings.USER));\n      this.claContributorService.addCompany(userModel.user_id, data).subscribe(response => {\n        this.storageService.removeItem(AppSettings.NEW_ORGANIZATIONS);\n        this.getOrganizationInformation(response.companyID);\n      }, exception => {\n        this.title = 'Request Failed';\n        this.message = exception.error.Message ? exception.error.Message : exception.error.message;\n        this.openDialog(this.errorModal);\n      });\n    }\n    getOrganizationInformation(companySFID) {\n      this.claContributorService.getOrganizationDetails(companySFID).subscribe(response => {\n        this.storageService.setItem(AppSettings.SELECTED_COMPANY, response);\n        this.company = response;\n        this.manageAuthRedirection();\n      }, exception => {\n        // To add org in salesforce take couple of seconds\n        // So called getOrganizationInformation metod till result comes\n        this.failedCount++;\n        if (this.failedCount >= AppSettings.MAX_FAILED_COUNT) {\n          // end API call after 20 time failed\n          this.title = 'Request Failed';\n          this.message = exception.error.Message;\n          this.openDialog(this.errorModal);\n        } else {\n          this.getOrganizationInformation(companySFID);\n        }\n      });\n    }\n    validateUserLFID() {\n      if (this.claContributorService.getUserLFID()) {\n        if (this.authService.loggedIn) {\n          this.addContributorAsDesignee();\n        } else {\n          this.redirectToAuth0();\n        }\n      } else {\n        // Handle usecase wheather LFID is not present but session already exist in browser.\n        if (this.authService.loggedIn) {\n          this.addContributorAsDesignee();\n        } else {\n          this.message = '<p>You will need to use your LF account to access the CLA Manager console,' + ' or create an LF Login account if you do not have one already.</p>' + '<p>After logging in, you will be redirected to ' + 'the CLA Manager console where you can sign the CLA (or send it to an authorized signatory) and approve contributors on behalf of your organization.</p>';\n          this.openDialog(this.warningModal);\n        }\n      }\n    }\n    addContributorAsDesignee() {\n      this.failedCount = 0;\n      const interval = setInterval(() => {\n        const authData = JSON.parse(this.storageService.getItem(AppSettings.AUTH_DATA));\n        if (authData) {\n          const data = {\n            userEmail: authData.user_email\n          };\n          this.addAsCLAManagerDesignee(data);\n          clearInterval(interval);\n        } else {\n          this.authService.login();\n          clearInterval(interval);\n        }\n      }, 2000);\n    }\n    addAsCLAManagerDesignee(data) {\n      const projectId = JSON.parse(this.storageService.getItem(AppSettings.PROJECT_ID));\n      this.claContributorService.addAsCLAManagerDesignee(this.company.companyID, projectId, data).subscribe(() => {\n        this.failedCount = 0;\n        this.checkRoleAssignment();\n      }, exception => {\n        if (exception.status === 409) {\n          // User has already CLA manager designee.\n          this.hasCLAManagerDesignee = true;\n          this.proceedToCorporateConsole();\n        } else if (exception.status === 401) {\n          this.authService.login();\n        } else {\n          this.failedCount++;\n          if (this.failedCount <= AppSettings.MAX_CLA_MANAGER_DESIGNEE_RETRY_COUNT) {\n            setTimeout(() => {\n              this.addAsCLAManagerDesignee(data);\n            }, 200);\n          } else {\n            this.title = 'Request Failed';\n            this.storageService.removeItem(AppSettings.ACTION_TYPE);\n            this.message = exception.error.Message ? exception.error.Message : exception.error.message;\n            this.openDialog(this.errorModal);\n          }\n        }\n      });\n    }\n    checkRoleAssignment() {\n      const projectId = JSON.parse(this.storageService.getItem(AppSettings.PROJECT_ID));\n      const authData = JSON.parse(this.storageService.getItem(AppSettings.AUTH_DATA));\n      this.claContributorService.hasRoleAssigned(this.company.companyExternalID, projectId, authData.userid).subscribe(result => {\n        if (result.hasRole) {\n          this.hasCLAManagerDesignee = true;\n          this.proceedToCorporateConsole();\n        } else {\n          this.retryRoleAssignement();\n        }\n      }, exception => {\n        this.title = 'Request Failed';\n        this.message = exception.error.Message;\n        this.openDialog(this.errorModal);\n      });\n    }\n    retryRoleAssignement() {\n      this.failedCount++;\n      if (this.failedCount <= AppSettings.MAX_ROLE_ASSIGN_FAILED_COUNT) {\n        this.checkRoleAssignment();\n      } else {\n        this.showRetryBtn = true;\n        this.title = 'Request Failed';\n        this.message = 'The initial CLA manager settings could not be assigned.</br>' + 'Please click on Retry to allow platform more time to assign settings.</br>' + 'Otherwise you can file a <a href=\"\"' + AppSettings.TICKET_URL + 'target=\"_blank\"><b>support ticket</b>.</a>' + ' Once the support ticket is resolved, you will be able to proceed with the CLA.';\n        this.openDialog(this.errorModal);\n      }\n    }\n    proceedToCorporateConsole() {\n      if (this.hasCLAManagerDesignee) {\n        this.storageService.removeItem(AppSettings.ACTION_TYPE);\n        this.showCloseBtnEmitter.emit(true);\n      }\n    }\n    onClickProceedBtn() {\n      this.modalService.dismissAll();\n      this.message = '<p>You will be redirected to the CLA Manager console where you can sign the CLA (or send it to an authorized signatory) and approve contributors on behalf of your organization.</p>';\n      this.openDialog(this.warningModal);\n    }\n    onClickProceedModalBtn() {\n      if (!this.hasCLAManagerDesignee) {\n        this.redirectToAuth0();\n      } else {\n        this.modalService.dismissAll();\n        this.loaderService.show();\n        const corporateUrl = this.claContributorService.getLFXCorporateURL();\n        console.log('corporateURL: ', corporateUrl);\n        if (corporateUrl !== '') {\n          this.storageService.removeItem(AppSettings.ACTION_TYPE);\n          window.open(corporateUrl, '_self');\n        } else {\n          this.alertService.error('Error occurred during redirecting to the corporate console.');\n          this.loaderService.hide();\n        }\n      }\n    }\n    redirectToAuth0() {\n      this.storageService.setItem(AppSettings.ACTION_TYPE, AppSettings.SIGN_CLA);\n      this.authService.login();\n    }\n    onClickBackBtn() {\n      const data = {\n        action: 'CLA_NOT_SIGN',\n        payload: false\n      };\n      this.claContributorService.openDialogModalEvent.next(data);\n    }\n    onClickClose() {\n      this.modalService.dismissAll();\n    }\n    onClickRetry() {\n      this.modalService.dismissAll();\n      const data = {\n        action: 'RETRY_CONFIG_CLA_MANAGER',\n        payload: false\n      };\n      this.claContributorService.openDialogModalEvent.next(data);\n    }\n    openDialog(content) {\n      this.modalService.open(content, {\n        centered: true,\n        backdrop: 'static',\n        keyboard: false\n      });\n    }\n  }\n  ConfigureClaManagerModalComponent.ɵfac = function ConfigureClaManagerModalComponent_Factory(t) {\n    return new (t || ConfigureClaManagerModalComponent)(i0.ɵɵdirectiveInject(i1.ClaContributorService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.NgbModal), i0.ɵɵdirectiveInject(i5.AlertService), i0.ɵɵdirectiveInject(i6.LoaderService));\n  };\n  ConfigureClaManagerModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ConfigureClaManagerModalComponent,\n    selectors: [[\"app-configure-cla-manager-modal\"]],\n    viewQuery: function ConfigureClaManagerModalComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.errorModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.warningModal = _t.first);\n      }\n    },\n    outputs: {\n      showCloseBtnEmitter: \"showCloseBtnEmitter\"\n    },\n    decls: 15,\n    vars: 7,\n    consts: [[1, \"container\"], [1, \"row\", \"justify-content-center\"], [1, \"col-auto\", \"pr-0\", \"icon\", \"mt-20\"], [\"class\", \"fas fa-spinner fa-spin\", 4, \"ngIf\"], [\"class\", \"fas fa-check-circle green\", 4, \"ngIf\"], [\"class\", \"col-10 mt-20 message\", 4, \"ngIf\"], [1, \"row\", \"justify-content-center\", \"mt-20\"], [1, \"col-5\"], [\"tabindex\", \"-1\", \"type\", \"button\", 1, \"btn\", 3, \"ngClass\", \"click\"], [\"errorModal\", \"\"], [\"warningModal\", \"\"], [1, \"fas\", \"fa-spinner\", \"fa-spin\"], [1, \"fas\", \"fa-check-circle\", \"green\"], [1, \"col-10\", \"mt-20\", \"message\"], [1, \"model\"], [1, \"modal-body\"], [1, \"row\", \"justify-content-center\", \"success-dialog\"], [1, \"col-auto\"], [1, \"fas\", \"fa-exclamation-circle\", \"logo\", \"red\"], [1, \"col-12\", \"title\"], [1, \"col-11\", \"success-message\", 3, \"innerHTML\"], [1, \"col-4\"], [\"tabindex\", \"-1\", \"type\", \"button\", 1, \"success-btn\", 3, \"click\"], [\"class\", \"col-4\", 4, \"ngIf\"], [\"title\", \"\", \"showCloseBtn\", \"true\", 3, \"closeDialogEmitter\"], [1, \"col-11\", \"warning-message\", 3, \"innerHTML\"], [\"tabindex\", \"-1\", \"type\", \"button\", 1, \"success-btn\", \"go-back\", 3, \"click\"]],\n    template: function ConfigureClaManagerModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtemplate(3, ConfigureClaManagerModalComponent_i_3_Template, 1, 0, \"i\", 3);\n        i0.ɵɵtemplate(4, ConfigureClaManagerModalComponent_i_4_Template, 1, 0, \"i\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, ConfigureClaManagerModalComponent_div_5_Template, 2, 1, \"div\", 5);\n        i0.ɵɵtemplate(6, ConfigureClaManagerModalComponent_div_6_Template, 2, 0, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"div\", 7);\n        i0.ɵɵelementStart(9, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function ConfigureClaManagerModalComponent_Template_button_click_9_listener() {\n          return ctx.onClickProceedBtn();\n        });\n        i0.ɵɵtext(10, \" Proceed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, ConfigureClaManagerModalComponent_ng_template_11_Template, 12, 3, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(13, ConfigureClaManagerModalComponent_ng_template_13_Template, 11, 1, \"ng-template\", null, 10, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hasCLAManagerDesignee);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasCLAManagerDesignee);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hasCLAManagerDesignee);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasCLAManagerDesignee);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c2, ctx.hasCLAManagerDesignee));\n      }\n    },\n    directives: [i7.NgIf, i7.NgClass, i8.ModalHeaderComponent],\n    styles: [\".icon[_ngcontent-%COMP%]{color:#000;font-size:30px}.icon[_ngcontent-%COMP%]   .green[_ngcontent-%COMP%]{color:#a1d683!important}.mt-20[_ngcontent-%COMP%]{margin-top:25px}.pr-0[_ngcontent-%COMP%]{padding-right:0}.message[_ngcontent-%COMP%]{color:#333;font-size:14px}.btn[_ngcontent-%COMP%]{padding:4px;color:#fff;font-size:14px;font-weight:bold;font-family:\\\"SourceSansPro-bold\\\";text-align:center;background:#8492a6;border-radius:50px;width:100%}.btn.active[_ngcontent-%COMP%]{background:#0099cc}\"]\n  });\n  return ConfigureClaManagerModalComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}