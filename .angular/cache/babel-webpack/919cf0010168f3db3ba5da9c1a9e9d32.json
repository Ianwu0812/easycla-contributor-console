{"ast":null,"code":"import { AppSettings } from 'src/app/config/app-settings';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/storage.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/core/services/cla-contributor.service\";\nimport * as i4 from \"../../services/alert.service\";\nimport * as i5 from \"../../services/auth.service\";\nexport let AuthComponent = /*#__PURE__*/(() => {\n  class AuthComponent {\n    constructor(storageService, router, claContributorService, alertService, authService) {\n      this.storageService = storageService;\n      this.router = router;\n      this.claContributorService = claContributorService;\n      this.alertService = alertService;\n      this.authService = authService;\n    }\n    ngOnInit() {\n      this.contractType = JSON.parse(this.storageService.getItem(AppSettings.CONTRACT_TYPE));\n      this.hasGerrit = JSON.parse(this.storageService.getItem(AppSettings.HAS_GERRIT));\n      this.actionType = JSON.parse(this.storageService.getItem(AppSettings.ACTION_TYPE));\n      this.projectId = JSON.parse(this.storageService.getItem(AppSettings.PROJECT_ID));\n      this.userId = JSON.parse(this.storageService.getItem(AppSettings.USER_ID));\n      this.previousURL = decodeURIComponent(window.location.hash.split('=')[1]);\n      this.setMessage();\n      this.authService.loading$.subscribe(loading => {\n        if (!loading) {\n          this.authService.isAuthenticated$.subscribe(authenticated => {\n            if (authenticated) {\n              this.handleRedirection();\n            } else {\n              this.authService.login();\n            }\n          });\n        }\n      });\n    }\n    handleRedirection() {\n      this.performActionAsPerType();\n    }\n    setMessage() {\n      if (this.actionType === AppSettings.SIGN_CLA) {\n        this.message = 'Wait... You are being redirected to the Configure CLA Manager.';\n        return;\n      }\n      if (this.hasGerrit) {\n        this.message = 'You are being redirected to the ' + this.contractType + ' contributor console.';\n        return;\n      }\n      this.message = 'The page you are looking for was not found.';\n    }\n    performActionAsPerType() {\n      if (this.actionType === AppSettings.SIGN_CLA) {\n        const url = '/corporate-dashboard/' + this.projectId + '/' + this.userId;\n        this.router.navigate([url], {\n          queryParams: {\n            view: AppSettings.SIGN_CLA\n          }\n        });\n        return;\n      }\n      if (this.hasGerrit) {\n        this.getGerritProjectInfo();\n        this.getUserInfo();\n        return;\n      }\n      if (this.previousURL !== undefined && this.previousURL !== 'undefined') {\n        this.router.navigateByUrl(this.previousURL);\n        return;\n      } else {\n        // Redirect to landing page.\n        const redirectUrl = JSON.parse(this.storageService.getItem(AppSettings.REDIRECT));\n        this.router.navigate(['/cla/project/' + this.projectId + '/user/' + this.userId], {\n          queryParams: {\n            redirect: redirectUrl\n          }\n        });\n      }\n      // *todo: handle default case\n    }\n\n    getUserInfo() {\n      this.claContributorService.getGerritUserInfo().subscribe(response => {\n        this.userId = response.user_id;\n        this.storageService.setItem(AppSettings.USER_ID, response.user_id);\n        this.storageService.setItem(AppSettings.USER, response);\n        this.redirectForGerritFlow();\n      }, exception => {\n        this.message = 'Failed to redirect on a ' + this.contractType + ' console.';\n        this.alertService.error(exception.error);\n      });\n    }\n    // No need to call update endpoint.\n    // updateUserInfo() {\n    //   const autData = JSON.parse(this.storageService.getItem(AppSettings.AUTH_DATA));\n    //   const user: UserModel = JSON.parse(this.storageService.getItem(AppSettings.USER));\n    //   const data = {\n    //     lfEmail: autData.user_email,\n    //     lfUsername: autData.userid, //LF username is actually userId in the auth service/EasyCLA.\n    //     githubUsername: user.user_github_username,\n    //     githubID: user.user_github_id\n    //   }\n    //   this.claContributorService.updateUser(data).subscribe(\n    //     (response: UpdateUserModel) => {\n    //       // Update new values in local storage.\n    //       user.lf_username = response.lfUsername;\n    //       user.lf_email = response.lfEmail;\n    //       this.storageService.setItem(AppSettings.USER, user);\n    //       this.performActionAsPerType();\n    //     },\n    //     (exception) => {\n    //       this.alertService.error(exception.error.Message);\n    //       this.message = 'Error occured during updating user info. Please contact to your administrator.';\n    //     }\n    //   );\n    // }\n    getGerritProjectInfo() {\n      this.claContributorService.getGerritProjectInfo(this.projectId).subscribe(response => {\n        this.storageService.setItem(AppSettings.PROJECT_NAME, response.project_name);\n        this.storageService.setItem(AppSettings.PROJECT, response);\n      }, exception => {\n        this.message = 'Failed to redirect on a ' + this.contractType + ' console.';\n        this.claContributorService.handleError(exception);\n      });\n    }\n    redirectForGerritFlow() {\n      if (this.contractType === 'individual') {\n        const url = '/individual-dashboard/' + this.projectId + '/' + this.userId;\n        this.router.navigate([url]);\n      } else if (this.contractType === 'corporate') {\n        const url = '/corporate-dashboard/' + this.projectId + '/' + this.userId;\n        this.router.navigate([url]);\n      } else {\n        this.message = 'Contract type is invalid.';\n      }\n    }\n  }\n  AuthComponent.ɵfac = function AuthComponent_Factory(t) {\n    return new (t || AuthComponent)(i0.ɵɵdirectiveInject(i1.StorageService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ClaContributorService), i0.ɵɵdirectiveInject(i4.AlertService), i0.ɵɵdirectiveInject(i5.AuthService));\n  };\n  AuthComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthComponent,\n    selectors: [[\"app-auth\"]],\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"container-fluid\"], [1, \"row\", \"justify-content-center\", \"align-items-center\"], [1, \"col-auto\", \"not-found\"]],\n    template: function AuthComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    styles: [\".row[_ngcontent-%COMP%]{height:calc(100vh - 262px)!important}.row[_ngcontent-%COMP%]   .not-found[_ngcontent-%COMP%]{font-size:18px;text-align:center;font-weight:bold}\"]\n  });\n  return AuthComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}