{"ast":null,"code":"// Copyright The Linux Foundation and each contributor to CommunityBridge.\n// SPDX-License-Identifier: MIT\nimport { EventEmitter } from '@angular/core';\nimport { ProjectModel } from 'src/app/core/models/project';\nimport { UserModel } from 'src/app/core/models/user';\nimport { AppSettings } from 'src/app/config/app-settings';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/alert.service\";\nimport * as i2 from \"../../services/storage.service\";\nimport * as i3 from \"src/app/core/services/cla-contributor.service\";\nexport let ProjectTitleComponent = /*#__PURE__*/(() => {\n  class ProjectTitleComponent {\n    constructor(alertService, storageService, claContributorService) {\n      this.alertService = alertService;\n      this.storageService = storageService;\n      this.claContributorService = claContributorService;\n      this.errorEmitter = new EventEmitter();\n      this.successEmitter = new EventEmitter();\n      this.project = new ProjectModel();\n      this.user = new UserModel();\n    }\n    ngOnInit() {\n      const hasGerrit = JSON.parse(this.storageService.getItem(AppSettings.HAS_GERRIT));\n      if (hasGerrit) {\n        this.project.project_name = JSON.parse(this.storageService.getItem(AppSettings.PROJECT_NAME));\n      } else {\n        this.validateGithubFlow();\n      }\n    }\n    validateGithubFlow() {\n      if (this.projectId && this.userId) {\n        const localProjectId = JSON.parse(this.storageService.getItem(AppSettings.PROJECT_ID));\n        const localUserId = JSON.parse(this.storageService.getItem(AppSettings.USER_ID));\n        if (localProjectId !== this.projectId) {\n          this.getProject();\n        } else {\n          this.successEmitter.emit('Project');\n          this.project.project_name = JSON.parse(this.storageService.getItem(AppSettings.PROJECT_NAME));\n        }\n        if (localUserId !== this.userId) {\n          this.getUser();\n        }\n      } else {\n        this.errorEmitter.emit(true);\n        this.alertService.error('Invalid project id and user id in URL');\n      }\n    }\n    getProject() {\n      if (this.projectId) {\n        this.claContributorService.getProject(this.projectId).subscribe(response => {\n          this.project = response;\n          this.storageService.setItem(AppSettings.PROJECT_NAME, this.project.project_name);\n          this.storageService.setItem(AppSettings.PROJECT_ID, this.projectId);\n          this.storageService.setItem(AppSettings.PROJECT, this.project);\n          this.successEmitter.emit('Project');\n        }, exception => {\n          this.errorEmitter.emit(true);\n          this.claContributorService.handleError(exception);\n        });\n      } else {\n        this.errorEmitter.emit(true);\n        this.alertService.error('Invalid project id in URL');\n      }\n    }\n    getUser() {\n      if (this.userId) {\n        this.claContributorService.getUser(this.userId).subscribe(response => {\n          this.user = response;\n          this.storageService.setItem(AppSettings.USER_ID, this.userId);\n          this.storageService.setItem(AppSettings.USER, this.user);\n          this.successEmitter.emit('User');\n        }, exception => {\n          this.errorEmitter.emit(true);\n          this.claContributorService.handleError(exception);\n        });\n      } else {\n        this.errorEmitter.emit(true);\n        this.alertService.error('Invalid user id in URL');\n      }\n    }\n  }\n  ProjectTitleComponent.ɵfac = function ProjectTitleComponent_Factory(t) {\n    return new (t || ProjectTitleComponent)(i0.ɵɵdirectiveInject(i1.AlertService), i0.ɵɵdirectiveInject(i2.StorageService), i0.ɵɵdirectiveInject(i3.ClaContributorService));\n  };\n  ProjectTitleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProjectTitleComponent,\n    selectors: [[\"app-project-title\"]],\n    inputs: {\n      projectId: \"projectId\",\n      userId: \"userId\"\n    },\n    outputs: {\n      errorEmitter: \"errorEmitter\",\n      successEmitter: \"successEmitter\"\n    },\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"container-fluid\", \"project-name\"], [1, \"row\"], [1, \"col-12\"]],\n    template: function ProjectTitleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.project.project_name, \" \");\n      }\n    },\n    styles: [\".project-name[_ngcontent-%COMP%]{background-color:#fff;color:#000;padding:15px;font-size:16px;font-weight:bold;text-align:center;word-break:break-all}\"]\n  });\n  return ProjectTitleComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}