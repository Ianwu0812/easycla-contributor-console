{"ast":null,"code":"import { AppSettings } from 'src/app/config/app-settings';\nimport * as i0 from \"@angular/core\";\nexport let StorageService = /*#__PURE__*/(() => {\n  class StorageService {\n    constructor() {\n      this.cookiesItems = [];\n    }\n    getItem(key) {\n      const result = localStorage.getItem(key);\n      let resultJson = null;\n      if (result != null) {\n        resultJson = result;\n      }\n      return resultJson;\n    }\n    setItem(key, value) {\n      localStorage.setItem(key, JSON.stringify(value));\n    }\n    setItemInCookies(key, value) {\n      this.cookiesItems.push(key);\n      const d = new Date();\n      d.setTime(d.getTime() + AppSettings.COOKIE_EXPIRY);\n      const expires = 'expires=' + d.toUTCString();\n      document.cookie = key + '=' + value + ';' + expires + ';path=/';\n    }\n    getItemFromCookies(key) {\n      const name = key + '=';\n      const ca = document.cookie.split(';');\n      for (const i of ca) {\n        let c = ca[i];\n        while (c.charAt(0) === ' ') {\n          c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n          return c.substring(name.length, c.length);\n        }\n      }\n      return '';\n    }\n    removeItem(key) {\n      localStorage.removeItem(key);\n    }\n    removeGerritItems() {\n      localStorage.removeItem(AppSettings.CONTRACT_TYPE);\n      localStorage.removeItem(AppSettings.SELECTED_COMPANY);\n      localStorage.removeItem(AppSettings.ACTION_TYPE);\n      localStorage.removeItem(AppSettings.ACTION_DATA);\n    }\n    removeGithubItems() {\n      localStorage.removeItem(AppSettings.USER);\n      localStorage.removeItem(AppSettings.SELECTED_COMPANY);\n      localStorage.removeItem(AppSettings.ACTION_TYPE);\n      localStorage.removeItem(AppSettings.ACTION_DATA);\n    }\n    removeAll() {\n      localStorage.clear();\n    }\n    removeAllCookies() {\n      const that = this;\n      this.cookiesItems.forEach(key => {\n        that.setItemInCookies(key, '');\n      });\n    }\n  }\n  StorageService.ɵfac = function StorageService_Factory(t) {\n    return new (t || StorageService)();\n  };\n  StorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StorageService,\n    factory: StorageService.ɵfac\n  });\n  return StorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}