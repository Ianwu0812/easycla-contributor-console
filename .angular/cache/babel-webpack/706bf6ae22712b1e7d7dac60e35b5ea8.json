{"ast":null,"code":"import { ActiveSignatureModel } from 'src/app/core/models/active-signature';\nimport { IndividualRequestSignatureModel } from 'src/app/core/models/individual-request-signature';\nimport { AppSettings } from 'src/app/config/app-settings';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/core/services/cla-contributor.service\";\nimport * as i3 from \"src/app/shared/services/alert.service\";\nimport * as i4 from \"src/app/shared/services/storage.service\";\nimport * as i5 from \"../../../../shared/components/project-title/project-title.component\";\nimport * as i6 from \"../../component/docusign-signature-model/docusign-signature-model.component\";\nexport let IndividualDashboardComponent = /*#__PURE__*/(() => {\n  class IndividualDashboardComponent {\n    constructor(route, router, claContributorService, alertService, storageService) {\n      this.route = route;\n      this.router = router;\n      this.claContributorService = claContributorService;\n      this.alertService = alertService;\n      this.storageService = storageService;\n      this.activeSignatureModel = new ActiveSignatureModel();\n      this.individualRequestSignatureModel = new IndividualRequestSignatureModel();\n      this.projectId = this.route.snapshot.paramMap.get('projectId');\n      this.userId = this.route.snapshot.paramMap.get('userId');\n    }\n    ngOnInit() {\n      this.hasGerrit = JSON.parse(this.storageService.getItem(AppSettings.HAS_GERRIT));\n      this.status = 'Pending';\n      if (this.hasGerrit) {\n        this.postIndivdualRequestSignature();\n      } else {\n        this.findActiveSignature();\n      }\n    }\n    findActiveSignature() {\n      this.claContributorService.getUserActiveSignature(this.userId).subscribe(response => {\n        if (response) {\n          this.activeSignatureModel = response;\n          this.postIndivdualRequestSignature();\n        } else {\n          this.status = 'Failed';\n          const error = 'Whoops, It looks like you don\\'t have any signatures in progress.' + ' Try going back to your pull request and restarting the signing process from your pull request if necessary.';\n          this.alertService.error(error);\n        }\n      }, exception => {\n        this.claContributorService.handleError(exception);\n      });\n    }\n    postIndivdualRequestSignature() {\n      const data = {\n        project_id: this.projectId,\n        user_id: this.userId,\n        return_url_type: this.hasGerrit ? AppSettings.GERRIT : this.claContributorService.getTypeByUrl(),\n        return_url: this.hasGerrit ? '' : this.activeSignatureModel.return_url\n      };\n      this.claContributorService.postIndividualSignatureRequest(data).subscribe(response => {\n        this.individualRequestSignatureModel = response;\n        const url = this.individualRequestSignatureModel.sign_url;\n        if (url) {\n          this.status = 'Completed';\n        } else {\n          this.status = 'Incomplete';\n          let error = 'CLA system is not able to support your request. Please ';\n          error += '<a href=\"https://jira.linuxfoundation.org/servicedesk/customer/portal/4\" style=\"color:#0099cc\" target=\"_blank\">create a ticket</a>';\n          error += ' to help us resolve this issue';\n          this.alertService.error(error);\n        }\n      }, exception => {\n        this.claContributorService.handleError(exception);\n      });\n    }\n    onClickSignCLA() {\n      const url = this.individualRequestSignatureModel.sign_url;\n      if (url) {\n        window.open(url, '_self');\n      } else {\n        this.alertService.error('Redirect URL not found, Please contact to your administrator.');\n      }\n    }\n    onBackClick() {\n      const redirectUrl = JSON.parse(this.storageService.getItem(AppSettings.REDIRECT));\n      if (!this.hasGerrit) {\n        // Redirect to Github home page.\n        this.router.navigate(['/cla/project/' + this.projectId + '/user/' + this.userId], {\n          queryParams: {\n            redirect: redirectUrl\n          }\n        });\n      } else {\n        if (redirectUrl !== null) {\n          window.open(redirectUrl, '_self');\n        } else {\n          const error = 'Unable to fetch redirect URL.';\n          this.alertService.error(error);\n        }\n      }\n    }\n  }\n  IndividualDashboardComponent.ɵfac = function IndividualDashboardComponent_Factory(t) {\n    return new (t || IndividualDashboardComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.ClaContributorService), i0.ɵɵdirectiveInject(i3.AlertService), i0.ɵɵdirectiveInject(i4.StorageService));\n  };\n  IndividualDashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: IndividualDashboardComponent,\n    selectors: [[\"app-individual-dashboard\"]],\n    decls: 3,\n    vars: 3,\n    consts: [[3, \"projectId\", \"userId\"], [1, \"col-12\", \"individual-dashboard\"], [3, \"status\", \"signCLAEmitter\", \"backBtnEmitter\"]],\n    template: function IndividualDashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-project-title\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"app-docusign-signature-model\", 2);\n        i0.ɵɵlistener(\"signCLAEmitter\", function IndividualDashboardComponent_Template_app_docusign_signature_model_signCLAEmitter_2_listener() {\n          return ctx.onClickSignCLA();\n        })(\"backBtnEmitter\", function IndividualDashboardComponent_Template_app_docusign_signature_model_backBtnEmitter_2_listener() {\n          return ctx.onBackClick();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"projectId\", ctx.projectId)(\"userId\", ctx.userId);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"status\", ctx.status);\n      }\n    },\n    directives: [i5.ProjectTitleComponent, i6.DocusignSignatureModelComponent],\n    styles: [\".individual-dashboard[_ngcontent-%COMP%]{padding:24px 0;background-color:#f5f5f5}\"]\n  });\n  return IndividualDashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}