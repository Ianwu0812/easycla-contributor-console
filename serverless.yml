# Copyright The Linux Foundation and each contributor to CommunityBridge.
# SPDX-License-Identifier: MIT

service: easycla-contributor-console-ui

package:
  exclude:
    - "**"
  include:
    - edge/dist/*

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage}
  region: us-east-1 # Region can't be configurable, lambda@edge is us-east-1 only.
  deploymentBucket:
    serverSideEncryption: AES256 # Make sure items are uploaded encrypted.
  role: EdgeRole
  tracing:
    apiGateway: true
    lambda: true
  timeout: 60 # optional, in seconds, default is 6
  # This will add tags to every resource generated by your CloudFormation template
  stackTags:
    Name: ${self:service}
    STAGE: ${self:provider.stage}
    ServiceType: Product
    Service: ${self:service}
    ServiceRole: UI
    ProgrammingPlatform: Angular
    Owner: 'David Deal'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::cla-signature-files-${opt:stage}/*"
        - "arn:aws:s3:::cla-project-logo-${opt:stage}/*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        - arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/cla-*

plugins:
  # Serverless Finch does s3 uploading. Called with 'sls client deploy'.
  # Also allows bucket removal with 'sls client remove'.
  - serverless-finch
  # Automatically versions and updates the lambda@edge function
  #- serverless-lambda-version
  # Automatically invalidates cloudfront after frontend bucket is deployed
  - serverless-cloudfront-invalidate
  - serverless-pseudo-parameters
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - '@silvermine/serverless-plugin-cloudfront-lambda-edge'

environment:
  STAGE: ${self:provider.stage}
  REGION: us-east-1

custom:
  project: ${file(./project-vars.yml):projectIdentifier}

  client: # Configurations for serverless finch.
    bucketName: ${self:custom.project}-${opt:stage}-${self:service}
    distributionFolder: dist/easycla-contributor-console
    indexDocument: index.html
    # Because our application is a Single Page Application, we always want our index
    # documents to handle 404/403 urls.
    errorDocument: index.html

  # CloudFront invalidation plugin configuration
  cloudfrontInvalidate:
    # Grab the distribution ID key from the output section
    distributionIdKey: 'CloudFrontDistribution'
    items: # one or more paths required
      - '/*'

  prune:
    automatic: true
    number: 3

functions:
  # Configure a lambda@edge handler. Lambda@edge is a function that adds http headers to
  # cloudfront requests/responses. We use it to enforce HTTP security best practices.
  clientEdgeResponse:
    handler: edge/dist/index.response
    memorySize: 128 # This is the maximum memory size for lambda@edge functions
    timeout: 1 # This is the maximum execution time for lambda@edge functions
    lambdaAtEdge:
      # The logical name used in your Resources section to define the CloudFront distribution.
      distribution: 'CloudFrontDistribution'
      eventType: 'viewer-response'

resources:
  Resources:
    # The bucket the website is uploaded to. We make sure to turn on AES256 encryption, which
    # is best practice.
    WebsiteDeploymentBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: AES256
        BucketName: ${self:custom.project}-${opt:stage}-${self:service}

    # Policy that only exposes bucket to cloudfront with proper
    # Origin Access Identity
    WebsiteDeploymentBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteDeploymentBucket
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: WebsiteDeploymentBucket
                    - "/*"
              Principal:
                AWS:
                  "Fn::Join":
                    - " "
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                      - Ref: WebsiteOriginAccessIdentity
    WebsiteOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "CloudFrontOriginAccessIdentity for ${self:custom.project}-${opt:stage}-${self:service}"

    # The cloudfront distribution wraps around our static website S3 bucket. Using a CDN to host our SPA is good
    # practice, and also lets us set custom headers using lambda@edge.
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - WebsiteDeploymentBucket
      Properties:
        DistributionConfig:
          Enabled: true
          Aliases:
            - ${env:PRODUCT_DOMAIN}
            - ${env:ROOT_DOMAIN}
          ViewerCertificate:
            AcmCertificateArn:
              Ref: Cert
            SslSupportMethod: sni-only
          Origins:
            - DomainName: { "Fn::GetAtt": [ WebsiteDeploymentBucket, DomainName ] }
              Id:
                Ref: WebsiteDeploymentBucket
              S3OriginConfig:
                OriginAccessIdentity:
                  "Fn::Join":
                    - ""
                    - - "origin-access-identity/cloudfront/"
                      - Ref: WebsiteOriginAccessIdentity
          # Routes besides / will result in S3 serving a 403
          # Redirect all routes back to the SPA where routes should
          # be handled
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ErrorCachingMinTTL: 1
              ResponsePagePath: '/index.html'
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: '/index.html'
          HttpVersion: http2
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true # Turns on gzipping
            #DefaultTTL: 86400 # Defaults to a day if no Cache-Control header is set.
            DefaultTTL: 600 # 10 minutes only due to users seeing a lot of stale cache issues after release (even after invalidating
            MinTTL: 0
            #MaxTTL: 31536000 # Can keep the file in the cloudfront cache for a maximum of a year.
            MaxTTL: 600 # 10 minutes only due to users seeing a lot of stale cache issues after release (even after invalidating
            TargetOriginId:
              Ref: WebsiteDeploymentBucket
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_100 # Cheapest class, only hosts content at North American cloudfront locations.

    # Severless usually generates our roles out of the box, but lambda@edge support is lacking, so we have to create
    # our own. This role can assume the edgelambda.amazonaws.com role, (the lambda won't run without it).
    EdgeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.project}-${opt:stage}-${self:service}-edge-role
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com # This is the important part of this role.
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.project}-${opt:stage}-${self:service}-origin-response-policy #LogGroupPolicy-${self:provider.stage} # Permissions to access Lambda@edge log groups.
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:GetFunction
                    - lambda:EnableReplication
                  Resource:
                    - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-clientEdgeResponse
                - Effect: Allow
                  Action:
                    - iam:CreateServiceLinkedRole
                    - cloudFront:UpdateDistribution
                    - cloudFront:CreateDistribution
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObjectAcl
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:DeleteObject
                    - s3:GetBucketLocation
                    - s3:PutObjectAcl
                  Resource:
                    - arn:aws:s3:::${self:custom.project}-${opt:stage}-${self:service}
                    - arn:aws:s3:::${self:custom.project}-${opt:stage}-${self:service}/*
                - Effect: Allow
                  Action:
                    - s3:ListAllMyBuckets
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:DescribeLogGroups
                    - logs:DescribeLogStreams
                    - logs:PutLogEvents
                    - logs:GetLogEvents
                    - logs:FilterLogEvents
                  Resource:
                    - arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:*
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    Cert:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${env:ROOT_DOMAIN}
        SubjectAlternativeNames:
          - ${env:PRODUCT_DOMAIN}
        ValidationMethod: DNS

  Outputs:
    CloudFrontDistributionId:
      Value:
        Ref: CloudFrontDistribution

    WebsiteDeploymentBucketName:
      Value:
        Ref: WebsiteDeploymentBucket
      Export:
        Name: WebsiteDeploymentBucketName

    Certificate:
      Description: Domain certificate ARN
      Value:
        Ref: Cert
      Export:
        Name: CertificateArn