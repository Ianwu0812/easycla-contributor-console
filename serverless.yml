service: easycla-contributor-console

package:
  exclude:
    - "**"
  include:
    - dist/easycla-contributor-console/*

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage}
  region: us-east-2
  deploymentBucket:
    serverSideEncryption: AES256 # Make sure items are uploaded encrypted.
  role: EdgeRole
  timeout: 60 # optional, in seconds, default is 6
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::cla-signature-files-${self:provider.stage}/*"
        - "arn:aws:s3:::cla-project-logo-${self:provider.stage}/*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:${self:provider.region}:"
            - Ref: AWS::AccountId
            - ":parameter/cla-*"

plugins:
  # Serverless Finch does s3 uploading. Called with 'sls client deploy'.
  # Also allows bucket removal with 'sls client remove'.
  - serverless-finch
  # Automatically versions and updates the lambda@edge function
  - serverless-lambda-version
  # Automatically invalidates cloudfront after frontend bucket is deployed
  - serverless-cloudfront-invalidate
  - serverless-pseudo-parameters

environment:
  STAGE: ${self:provider.stage}
  REGION: us-east-2

custom:
  client: # Configurations for serverless finch.
    bucketName: ${self:service}-${opt:stage}
    distributionFolder: dist/easycla-contributor-console
    indexDocument: index.html
    # Because our application is a Single Page Application, we always want our index
    # documents to handle 404/403 urls.
    errorDocument: index.html

  # CloudFront invalidation plugin configuration
  cloudfrontInvalidate:
    # Grab the distribution ID key from the output section
    distributionIdKey: 'CloudfrontDistributionId'
    items: # one or more paths required
      - '/*'

functions:
  # Configure a lambda@edge handler. Lambda@edge is a function that adds http headers to
  # cloudfront requests. We use it to enforce HTTP security best practices.
  clientEdge:
    # TODO - implement this
    handler: edge/dist/index.handler
    memorySize: 128 # This is the maximum memory size for lambda@edge functions
    timeout: 1 # This is the maximum execution time for lambda@edge functions

resources:
  Resources:
    # The bucket the website is uploaded to. We make sure to turn on AES256 encryption, which
    # is best practice.
    WebsiteDeploymentBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: AES256
        BucketName: ${self:service}-${opt:stage}
    # Policy that only exposes bucket to cloudfront with proper
    # Origin Access Identity
    WebsiteDeploymentBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteDeploymentBucket
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: WebsiteDeploymentBucket
                    - "/*"
              Principal:
                AWS:
                  "Fn::Join":
                    - " "
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                      - Ref: WebsiteOriginAccessIdentity
    WebsiteOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "CloudFrontOriginAccessIdentity for ${self:service}-${self:provider.stage}"
    # The cloudfront distribution wraps around our static website S3 bucket. Using a CDN to host our SPA is good
    # practice, and also lets us set custom headers using lambda@edge.
    CloudfrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - WebsiteDeploymentBucket
      Properties:
        DistributionConfig:
          Enabled: true
          Aliases:
            - ${env:PRODUCT_DOMAIN}
            - ${env:ROOT_DOMAIN}
          ViewerCertificate:
            AcmCertificateArn:
              Ref: Cert
            SslSupportMethod: sni-only
          Origins:
            - DomainName: { "Fn::GetAtt": [ WebsiteDeploymentBucket, DomainName ] }
              Id:
                Ref: WebsiteDeploymentBucket
              S3OriginConfig:
                OriginAccessIdentity:
                  "Fn::Join":
                    - ""
                    - - "origin-access-identity/cloudfront/"
                      - Ref: WebsiteOriginAccessIdentity
          # Routes besides / will result in S3 serving a 403
          # Redirect all routes back to the SPA where routes should
          # be handled
          CustomErrorResponses:
            -
              ErrorCode: 403
              ErrorCachingMinTTL: 1
              ResponseCode: 200
              ResponsePagePath: '/index.html'
          HttpVersion: http2
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            # Links our lambda@edge function, (which adds HTTPS our security headers), to the cloudfront distribution.
            LambdaFunctionAssociations:
              - EventType: 'viewer-response'
                # Cloudfront requires a lambda@edge arn in the format
                # 'arn:aws:lambda:${region}:${accountNumber}:function:${lambdaName}:${explicitVersion}'
                # We use the serverless-lambda-version plugin to automatically update this every time there is a change.
                LambdaFunctionARN: ClientEdgeLambdaFunction
            Compress: true # Turns on gzipping
            #DefaultTTL: 86400 # Defaults to a day if no Cache-Control header is set.
            DefaultTTL: 600 # 10 minutes only due to users seeing a lot of stale cache issues after release (even after invalidating
            MinTTL: 0
            #MaxTTL: 31536000 # Can keep the file in the cloudfront cache for a maximum of a year.
            MaxTTL: 600 # 10 minutes only due to users seeing a lot of stale cache issues after release (even after invalidating
            TargetOriginId:
              Ref: WebsiteDeploymentBucket
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_100 # Cheapest class, only hosts content at North American cloudfront locations.

    # Severless usually generates our roles out of the box, but lambda@edge support is lacking, so we have to create
    # our own. This role can assume the edgelambda.amazonaws.com role, (the lambda won't run without it).
    EdgeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${opt:stage}-edge-role
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com # This is the important part of this role.
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: LogGroupPolicy # Permissions to access Lambda@edge log groups.
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:DescribeLogGroups
                    - logs:DescribeLogStreams
                    - logs:PutLogEvents
                    - logs:GetLogEvents
                    - logs:FilterLogEvents
                  Resource:
                    - "Fn::Join":
                      - ":"
                      - - arn:aws:logs
                        - "Ref": "AWS::Region"
                        - "Ref": "AWS::AccountId"
                        - log-group
                        - "*"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
    Cert:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${env:ROOT_DOMAIN}
        SubjectAlternativeNames:
          - ${env:PRODUCT_DOMAIN}
        ValidationMethod: DNS
  Outputs:
    CloudfrontDistributionId:
      Value:
        Ref: CloudfrontDistribution
